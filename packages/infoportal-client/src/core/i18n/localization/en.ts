import {formatDistance, formatDuration as formatDurationFns} from 'date-fns'
import {Ip} from 'infoportal-api-sdk'

const invalidDate = ''

export const isDateValid = (d?: Date): boolean => {
  return !!d && d instanceof Date && !isNaN(d.getTime())
}

export const formatDate = (d?: Date): string => {
  if (!isDateValid(d)) return invalidDate
  return d!.toLocaleDateString()
}

export const formatTime = (d?: Date): string => {
  if (!isDateValid(d)) return invalidDate
  return d!.toLocaleTimeString()
}

export const formatDateTime = (d?: Date): string => {
  if (!isDateValid(d)) return invalidDate
  return formatDate(d) + ' ' + formatTime(d)
}

export const dateFromNow: {
  (d: Date): string
  (d?: undefined): undefined
  (d?: Date): string | undefined
} = d => {
  return d ? formatDistance(d, new Date(), {addSuffix: true}) : (undefined as any)
}

export const formatLargeNumber = (n?: number, options?: Intl.NumberFormatOptions): string => {
  return n !== undefined && n !== null && !isNaN(n) ? n.toLocaleString('en-EN', options) : '-'
}

export const formatDuration = formatDurationFns

export type Messages = (typeof en)['messages']

export const en = Object.freeze({
  formatDate,
  formatTime,
  formatDateTime,
  dateFromNow,
  formatDuration,
  formatLargeNumber,
  messages: {
    default: 'Default',
    snapshot: 'Snapshot',
    invalid: 'Invalid',
    others: 'Others',
    other: 'Other',
    exist: 'Exist',
    createWorkspace: 'Create Workspace',
    notExist: 'Not exist',
    area: 'Area',
    men: 'Men',
    return: 'Return',
    lightTheme: {
      light: 'Light',
      dark: 'Dark',
      system: 'Device default',
    },
    importXlsFile: 'Import XLS file',
    noComment: 'No comment',
    answers: 'Answers',
    seeResults: `See results`,
    meta: 'Meta',
    updating: 'Updating',
    users: 'Users',
    link: 'Link',
    edit: 'Edit',
    type: 'Type',
    editKobo: `Edit (⚠️. Requires appropriate KoboToolbox permissions).`,
    editForm: `Edit`,
    apply: 'Apply',
    clear: 'Clear',
    cache: 'Cache',
    serverCache: 'Server cache',
    cancel: 'Cancel',
    custom: 'Custom',
    close: 'Close',
    home: 'Home',
    pageNotExists: 'This page does not exist.',
    reinitialize: 'Reinitialize',
    connectAs: 'Connect as',
    budget: 'Budget',
    column: 'Column',
    name: 'Name',
    by: 'By',
    createdByAt: (by: string, at: string) => `Created by ${by} at ${at}`,
    updatedByAt: (by: string, at: string) => `Updated by ${by} at ${at}`,
    accessLevel: 'Access level',
    females: 'Females',
    paidOn: 'Paid on',
    lastStatusUpdate: 'Last status update',
    save: 'Save',
    readonly: 'Read only',
    somethingWentWrong: 'Something went wrong',
    yes: 'Yes',
    influencingFactors: 'Influencing factors',
    familyUnity: 'Family unity',
    city: 'City',
    koboServer: 'Kobo server',
    no: 'No',
    deploymentStatus_: {
      [Ip.Form.DeploymentStatus.draft]: 'Draft',
      [Ip.Form.DeploymentStatus.archived]: 'Archived',
      [Ip.Form.DeploymentStatus.deployed]: 'Deployed',
    },
    open: 'Open',
    submissionsByLocation: 'Submissions by location',
    submissionsByCategory: 'Submissions by category',
    submissionsByUser: 'Submissions by user',
    submissionsByForm: 'Submissions by form',
    linkedToKobo: 'Linked to Kobo',
    includeKoboAccountNames: "Include KoboToolbox account's name",
    copyLink: 'Copy link',
    copyResponderLink: 'Copy responder link',
    copiedToClipboard: 'Copied to clipboard',
    copied: 'Copied',
    copy: 'Copy',
    forms: 'Forms',
    contactAdmin: 'Contact:',
    question: 'Question',
    anonymous: 'Anonymous',
    kobo: 'Kobo',
    answer: 'Answer',
    calculations: 'Calculations',
    value: 'Value',
    addUser: 'Add user',
    percent: 'Percent',
    Flagged: 'Flagged',
    UnderReview: 'UnderReview',
    Pending: 'Pending',
    alreadyExists: 'Already exists',
    history: 'History',
    recap: 'Recap',
    search: 'Search',
    searchInForms: (n: number) => `Search in ${n}`,
    settings: 'Settings',
    onboardingTitle: "Let's start with a name for your workspace",
    enterProjectName: 'Enter your workspace name',
    action: 'Action',
    workspaceId: 'Workspace ID',
    Approved: 'Approved',
    createShema: 'Create schema',
    _formAction: {
      thisActionTargetAFormWithoutSchema: `This action is targeting a form that does have any schema deployed yet.`,
      actionSummary: 'Action summary',
      newFunction: 'Create a Function',
      _actionTypeLabel: {
        [Ip.Form.Action.Type.insert]: 'Insert',
        [Ip.Form.Action.Type.mutate]: 'Mutate',
      } as const,
      _actionTypeDesc: {
        [Ip.Form.Action.Type.insert]: 'Generate new rows from submissions using a transformation.',
        [Ip.Form.Action.Type.mutate]: 'Modify existing rows from submissions using a function.',
      } as const,
    },
    updatingTag: (rowsCount: number, key: string, value: string) => `Updating ${key}=${value} on ${rowsCount} rows...`,
    cannotUpdateTag: (rowsCount: number, key: string, value: string) =>
      `Update failed for ${key}=${value} on ${rowsCount} rows. Table not edited.`,
    Rejected: 'Rejected',
    mykolaiv: 'Mykolaiv',
    lastConnectedAt: 'Last connection',
    validation: 'Validation',
    view: 'View',
    continue: 'Continue',
    viewData: 'View data',
    creating: 'Creating...',
    theme: 'Dark theme',
    format: 'Format',
    previous: 'Previous',
    filter: 'Filter',
    distinct: 'Distinct',
    noneFormatted: '<i>None</i>',
    none: 'None',
    filterPlaceholder: 'Filter...',
    count: 'Count',
    sum: 'Sum',
    average: 'Average',
    min: 'Min',
    max: 'Max',
    disabilities: 'Disabilities',
    minors: 'Minors',
    editAgain: 'Edit again',
    children: 'Children',
    next: 'Next',
    clearFilter: 'Clear filter',
    logout: 'Logout',
    youDontHaveAccess: `You don't have access. Contact alexandre.annic@drc.ngo`,
    share: 'Share',
    refresh: 'Refresh',
    refreshTable: 'Refresh current data',
    grantAccess: 'Grant access',
    title: 'Welcome',
    subTitle: 'InfoPortal',
    noDataAtm: 'No data at the moment',
    fileName: 'File name',
    signIn: 'Sign-in',
    signInMicrosoft: 'Sign in with Microsoft',
    signInMicrosoftDesc: 'Use your Microsoft credentials',
    signInGoogle: 'Sign in with Google',
    signInGoogleDesc: 'Use your Google account',
    committed: 'Committed',
    pending: 'Pending',
    rejected: 'Rejected',
    blank: 'Blank',
    suggestion: 'Suggestion',
    signInDesc: 'With your DRC Microsoft account',
    viewDate: `View data`,
    information: 'Information',
    koboData: `Kobo data`,
    activity: 'Activity',
    nfis: 'NFIs',
    previewActivity: `Preview activity`,
    previewRequestBody: `Preview request body code`,
    nLines: (n: number) => `<b>${n}</b> lignes`,
    confirm: 'Confirm',
    delete: 'Delete',
    deleteNRows: (n: string) => `Delete ${n} rows`,
    deleteSelected: `Delete selected`,
    downloadAsXLS: 'Download as XLS',
    downloadAsPdf: 'Download as PDF',
    all: 'All',
    created: 'Created',
    draft: 'Draft',
    live: 'Live',
    details: 'Details',
    _datatable: {
      currentlyDisplayed: `columns displayed`,
      view: 'Views',
      createNewView: 'New view name...',
      viewPublic: 'Public',
      viewPublicDesc: 'Anyone can see and edit',
      viewLock: 'Sealed',
      viewLockDesc: 'Anyone can see, only you can edit',
      viewPrivate: 'Private',
      viewPrivateDesc: 'Only you can see and edit',
      idFilterInfo: 'You can filter by multiple IDs by separating each with a space',
      idFilterPlaceholder: 'ID1 ID2 ID3 [...]',
      toggleColumns: 'Show/hide columns',
    },
    preview: 'Preview',
    paid: 'Paid',
    start: 'Start',
    submissionStart: 'Submission start',
    end: 'End',
    filters: 'Filters',
    endIncluded: 'End (included)',
    typeOfSite: 'Type of site',
    version: 'Version',
    validate: 'Validate',
    deploy: 'Deploy',
    deployLastVersion: 'Deploy last version',
    skipAndSubmit: 'Skip & Import now',
    xlsFormNoChangeTitle: 'No changes detected',
    xlsFormNoChangeDesc: 'You cannot upload this version because it is identical to the current one.',
    checkDiff: 'Check changes',
    success: 'Success',
    warning: 'Warning',
    versions: 'Versions',
    selectFile: 'Select file',
    selectXlsForm: 'Select XLS',
    error: 'Error',
    anErrorOccurred: 'An error occurred',
    create: 'Create',
    proxy: 'Proxy',
    noSurveyCreatedYet: 'No form created yet',
    proxyUrl: 'Proxy URL',
    proxyDestinationUrl: 'DestinationURL',
    enabled: 'Enabled',
    households: 'Households',
    displacementStatus: 'Displacement status',
    uniqIndividuals: 'Unique individuals',
    submissions: 'Submissions',
    householdSize: 'Household size',
    occurrences: 'Occurrences',
    dashboard: 'Dashboard',
    loading: 'Loading',
    price: 'Price',
    submittedAt: 'Submitted at',
    clearAll: 'Clear all',
    committedAt: 'Committed at',
    id: 'ID',
    idPhoto: 'ID Photo',
    back: 'Back',
    access: 'Access',
    accesses: 'Accesses',
    url: 'URL',
    confirmRemove: 'Confirm remove',
    confirmRemoveDesc: 'This action is permanent and cannot be undone.',
    expireAt: 'Expire at',
    slug: 'Slug',
    try: 'Try',
    category: 'Category',
    origin: 'Origin',
    originId: 'Origin ID',
    destination: 'Destination',
    invalidUrl: 'Invalid URL',
    mainConcerns: 'Main concern',
    accommodationCondition: 'Accommodation condition',
    tenureOfAccommodation: 'Accommodation tenure',
    housingStructure: 'Accommodation structure',
    firstPriorityNeed: '1st Priority needs',
    secondPriorityNeed: '2nd Priority needs',
    thirdPriorityNeed: '3rd Priority needs',
    selected: 'Selected',
    phone: 'Phone',
    payName: 'Payment contact name',
    payPhone: 'Payment contact phone',
    finance: 'Finance',
    admin: 'Admin',
    inPerson: 'In person',
    globalError: `If the problem persist, please contact support and include the snippet below.`,
    online: 'Online',
    age: 'Age',
    submitAll: 'Submit all',
    submit: 'Submit',
    newForm: 'New form',
    formSource: {
      smart: 'Smart database',
      kobo: 'Import from KoboToolbox',
      internal: 'Raw form',
    },
    changeAccount: 'Change account',
    addNewKoboAccount: 'Add new Kobo account',
    serverUrlV1: 'Server URL KC (API v1)',
    serverUrlV2: 'Server URL KF (API v2)',
    selectAccount: 'Select account',
    testConnection: 'Test connection',
    connectionSuccessful: 'Connection successful',
    apiToken: 'API Token',
    lastName: 'Last name',
    change: 'Change',
    includeColumns: `Include column's name`,
    successfullyEdited: (n: number) => `Successfully edited ${n} rows.`,
    table: 'Table',
    comparedToTotalAnswers: 'Based on total answers:',
    chart: 'Chart',
    group: 'Group',
    required: 'Required',
    invalidEmail: 'Invalid email',
    selectForm: 'Select form',
    duration: 'Duration',
    userInvitationAlreadySent: 'An invitation has already been sent.',
    userInvitationSent: 'Invitation sent!',
    accept: 'Accept',
    refuse: 'Refuse',
    notSpecified: 'Not specified',
    confirmYourOffice: (office: string) => `Confirm ${office} office`,
    itCannotBeChanged: (admin: string) =>
      `For privacy reasons, you will not be able to change it later without contacting ${admin}.`,
    select: 'Select',
    creation: 'Creation',
    deleteThisProject: 'Delete this form',
    deleteThisProjectDesc: 'Once you delete a form, there is no going back. Please be certain.',
    accountName: 'Account name',
    firstName: 'First name',
    patronyme: 'Patronyme',
    data: 'Data',
    duplicate: 'Duplicate',
    serverId: 'Server ID',
    server: 'Server',
    scoring: 'Scoring',
    selectAll: 'Select all',
    completed: 'Completed',
    ratio: 'Ratio',
    selectKoboForm: 'Select Kobo form',
    koboSubmissionTime: 'Kobo submission',
    absolute: 'Absolute',
    differences: 'Differences',
    noMessage: 'No message',
    import: 'Import',
    contact: (_: string) => `Contact <b>${_}</b>.`,
    intentions: 'Intentions',
    sex: 'Sex',
    message: `Message`,
    optional: 'Optional',
    dragdropTitle: 'Drag & drop your file here, or click to select',
    daily: 'Daily',
    monthly: 'Monthly',
    months: 'Months',
    createdAt: 'Created at',
    visible: 'Visible',
    visibility: 'Visibility',
    hidden: 'Hidden',
    updatedAt: 'Updated at',
    status: 'Status',
    selectData: 'Select Data',
    location: 'Location',
    submissionTime: 'Submission',
    submittedBy: 'By',
    add: 'Add',
    case: 'Case',
    protectionMonitoringDashboard: 'Protection monitoring dashboard',
    undefined: 'Unknown',
    unarchive: 'Unarchive',
    archive: 'Archive',
    archiveFormDesc: 'Archive this form and disable new submissions.',
    archiveKoboFormDesc: 'It will also be archived in Kobo.',
    coveredOblasts: 'Covered oblasts',
    coveredRaions: 'Covered raions',
    lackOfPersonalDoc: 'Individuals lacking personal documentation',
    lackOfHousingDoc: 'HHs lacking HLP documentation',
    sample: 'Sample overview',
    documentation: 'Documentation',
    general: 'General',
    email: 'Email',
    connectedToKobo: 'Connected to Kobo',
    connectedToKoboDesc: 'The database is automatically synchronized whenever submissions are made in Kobo.',
    connectToKobo: 'Connect to Kobo',
    connectToKoboDesc: 'The database will be automatically synchronized whenever submissions are made in Kobo.',
    disconnect: 'Disconnect',
    disconnectToKobo: 'Disconnect from Kobo',
    disconnectToKoboDesc:
      "The database won't be synchronized when submissions are made in Kobo. " +
      'Once you disconnect a form, there is no going back. Please be certain.',
    job: 'Job',
    Access: {
      giveAccessBy: 'Grant access by',
      jobAndOffice: 'Job and Office',
    },
    overview: 'Overview',
    requests: 'Requests',
    selectADatabase: 'Select a Kobo form',
    comparedToPreviousMonth: (n: number) => `Compared to ${n} days ago`,
    global: 'Global',
    description: 'Description',
    createdBy: 'Created by',
    gender: 'Gender',
    program: 'Program',
    progress: 'Progress',
    relative: 'Relative',
    cumulative: 'Cumulative',
    register: 'Register',
    appInMaintenance: "Application in maintenance, we'll be back soon.",
    comments: 'Comments',
    sort: 'Sort',
    hardRefresh: 'Hard refresh',
    amount: 'Amount',
    target: 'Target',
    date: 'Date',
    validFrom: 'Valid from',
    expiry: 'Expiry',
    pin: 'Pin',
    year: 'Year',
    koboForm: 'Kobo form',
    koboForms: 'Kobo forms',
    otherKoboForms: 'Other Kobo forms',
    _koboDatabase: {
      mergedDb: 'Merged DB',
      autoEmail: 'Auto Email',
      autoEmailDesc: 'Emails are sent to recipients on submission or column updates via Kobo or InfoPortal',
      isArchived: 'This form is archived.',
      translation: 'Translation',
      newValue: 'New value',
      oldValue: 'Old value',
      koboQuestion: 'Kobo question',
      deleted: 'Deleted',
      customColumn: 'Custom column',
      tagNotUpdated: 'Failed to update tag. Reloading clean data set...',
      downloadAsXLS: 'Download <b>filtered data</b> as XLS',
      importFromXLS: 'Import from XLS',
      repeatAs: 'Show Grouped questions as',
      repeatAsColumn: 'New columns',
      // repeatAsColumnDesc: 'Display each group question in a dedicated column.',
      repeatAsRows: 'New rows',
      repeatDont: `Squashed in 1 column`,
      repeatAsQuestionName: 'Select group to repeat',
      // repeatAsRowDesc: '',
      title: (form?: string) => `Kobo Database${form ? `: <b>${form}</b>` : ``}`,
      showAllQuestions: 'Show unanswered questions',
      pullData: `Synchronize last Kobo data.`,
      pullDataAt: (lastUpdate: Date) =>
        `Synchronize Kobo data.<br/>Last synchronization: <b>${formatDateTime(lastUpdate)}</b>.`,
      valueNoLongerInOption: 'This value is no longer in the options list',
      noAccessToForm: `You don't have access to any database.`,
      openForm: 'Open form',
    },
    _admin: {
      createGroup: 'Create group',
    },
    resourceDoesNotExist: 'Resource not found. It may have been deleted or never existed.',
    fillForm: 'Fill form',
    viewInKobo: 'View in Kobo',
    note: 'Note',
    projectCode: 'Project Code',
    form: 'Form',
    koboId: 'Kobo _id',
    desc: 'Desc',
    viewNMore: (n: number) => `View ${n} more`,
    viewNLess: (n: number) => `View ${n} less`,
    viewMore: 'More',
    viewLess: 'Less',
    source: 'Source',
    timeConsumingOperation: 'Time consuming operation.',
    sector: 'Sector',
    showMore: 'Show more',
    thisFormIsManagedByKobo: 'This form is managed by KoboToolbox.',
    filterBlanks: 'Filter blanks',
    total: 'Total',
    shouldDelete: 'Delete?',
    remove: 'Delete',
    sync: 'Sync',
    pullLast: 'Pull last',
    pullLastTitle: 'Pull last',
    beneficiaries: 'Beneficiaries',
    importData: {
      create: 'Upload New Data',
      update: 'Update Existing Data',
      generate: 'Generate Excel Template',
    },
    docsTitle: 'Documentation',
  },
})
