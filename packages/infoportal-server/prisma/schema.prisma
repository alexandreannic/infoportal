generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // provider = "postgresql"
  // url      = "postgresql://alexandreac:sieges78@localhost:5432/im-tools"
}

model Workspace {
  id              String            @id @default(uuid()) @db.Uuid
  createdAt       DateTime          @default(now())
  createdBy       String
  name            String
  slug            String            @unique
  sector          String?
  koboServer      KoboServer[]
  form            Form[]
  groups          Group[]
  accessTokens    AccessToken[]
  proxys          Proxy[]
  emailOutBoxs    EmailOutBox[]
  featureAccesses FormAccess[]
  workspaceAccess WorkspaceAccess[]

  @@index([slug])
}

model WorkspaceAccess {
  id          String      @id @default(uuid()) @db.Uuid
  createdAt   DateTime    @default(now())
  createdBy   String
  level       AccessLevel
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @db.Uuid
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId String      @db.Uuid

  @@unique([workspaceId, userId])
}

model KoboServer {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  url         String
  urlV1       String?
  token       String
  form        Form[]
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @db.Uuid
}

enum DeploymentStatus {
  deployed
  archived
  draft
}

enum FormSource {
  kobo
  disconnected
  internal
}

model Form {
  id               String               @id @default(cuid()) @db.VarChar(32)
  name             String
  server           KoboServer?          @relation(fields: [serverId], references: [id])
  serverId         String?              @db.Uuid
  source           FormSource           @default(kobo)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime?
  deploymentStatus DeploymentStatus?
  updatedBy        String?
  uploadedBy       String?
  enketoUrl        String?
  category         String?
  submissionsCount Int?
  answers          FormAnswers[]
  answersHistory   FormAnswersHistory[]
  workspaces       Workspace[]
  formVersion      FormVersion[]
  formAccess       FormAccess[]
}

enum FormVersionStatus {
  active
  inactive
  draft
}

model FormVersion {
  id         String            @id @default(cuid()) @db.VarChar(32)
  version    Int
  fileName   String?
  message    String?
  uploadedBy String
  createdAt  DateTime          @default(now())
  source     FormSource
  schema     Json
  status     FormVersionStatus @default(inactive)
  form       Form              @relation(fields: [formId], references: [id])
  formId     String

  @@unique([formId, source, version])
}

model FormAnswers {
  id                     String               @id
  uuid                   String
  form                   Form                 @relation(fields: [formId], references: [id])
  formId                 String
  updatedAt              DateTime?
  start                  DateTime
  end                    DateTime
  date                   DateTime
  version                String?
  submissionTime         DateTime
  validationStatus       String?
  validatedBy            String?
  source                 FormSource           @default(kobo)
  lastValidatedTimestamp Int?
  geolocation            String?
  answers                Json
  attachments            Json[]
  deletedAt              DateTime?
  deletedBy              String?
  tags                   Json?
  histories              FormAnswersHistory[] @relation("FormAnswersToHistory")

  @@unique([id, formId])
  @@index([deletedAt])
  @@index([date])
  @@index([formId])
}

model FormAnswersHistory {
  id       String        @id @default(uuid()) @db.Uuid
  form     Form?         @relation(fields: [formId], references: [id])
  formId   String?
  answerId String?
  answers  FormAnswers[] @relation("FormAnswersToHistory")
  by       String
  date     DateTime      @default(now())
  type     String?
  property String?
  oldValue Json?
  newValue Json?

  @@index([formId])
}

enum UserProvider {
  google
  microsoft
}

model User {
  id              String            @id @default(uuid()) @db.Uuid
  email           String            @unique
  createdBy       String?
  createdAt       DateTime          @default(now())
  lastConnectedAt DateTime?
  accessToken     String?
  name            String?
  drcJob          String?
  drcOffice       String?
  avatar          Bytes?            @db.ByteA
  accessLevel     AccessLevel       @default(Read)
  officer         String?
  activities      UserActivity[]
  workspaceAccess WorkspaceAccess[]
  provider        UserProvider?     @default(google)

  @@index([email])
}

model UserActivity {
  id     String   @id @default(uuid()) @db.Uuid
  at     DateTime @default(now())
  user   User?    @relation(fields: [userId], references: [id])
  detail String?
  userId String?  @db.Uuid
}

enum AccessLevel {
  Read
  Write
  Admin
}

model FormAccess {
  id          String      @id @default(uuid()) @db.Uuid
  createdBy   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?
  form        Form        @relation(fields: [formId], references: [id])
  formId      String      @db.VarChar(32)
  job         String?
  location    String?
  email       String?
  level       AccessLevel
  groupId     String?     @db.Uuid
  group       Group?      @relation(fields: [groupId], references: [id])
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId String      @db.Uuid
  filters     Json?
}

model Group {
  id          String       @id @default(uuid()) @db.Uuid
  createdAt   DateTime     @default(now())
  createdBy   String?
  name        String       @unique
  desc        String?
  accesses    FormAccess[]
  items       GroupItem[]
  workspace   Workspace    @relation(fields: [workspaceId], references: [id])
  workspaceId String       @db.Uuid
}

model GroupItem {
  id        String      @id @default(uuid()) @db.Uuid
  createdAt DateTime    @default(now())
  drcJob    String?
  drcOffice String?
  email     String?
  level     AccessLevel
  group     Group?      @relation(fields: [groupId], references: [id])
  groupId   String?     @db.Uuid
}

model AccessToken {
  id         String      @id @default(uuid()) @db.Uuid
  createdBy  DateTime    @default(now())
  name       String
  workspaces Workspace[]
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Proxy {
  id         String       @id @default(uuid()) @db.Uuid
  createdAt  DateTime     @default(now())
  expireAt   DateTime?
  createdBy  String?
  name       String       @unique
  slug       String       @unique
  url        String
  disabled   Boolean?
  usage      ProxyUsage[]
  workspaces Workspace[]
}

model ProxyUsage {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  ipAddresses String[]
  proxy       Proxy    @relation(fields: [proxyId], references: [id])
  proxyId     String   @db.Uuid
}

model JsonStore {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  updatedBy String
  key       String    @unique
  value     Json
}

model DatabaseView {
  id         String                 @id @default(uuid()) @db.Uuid
  databaseId String
  name       String
  createdAt  DateTime               @default(now())
  createdBy  String?
  updatedAt  DateTime?
  updatedBy  String?
  visibility DatabaseViewVisibility @default(Private)
  details    DatabaseViewCol[]

  @@unique([databaseId, name])
  @@index([name])
  @@index([databaseId])
}

model DatabaseViewCol {
  name       String
  view       DatabaseView?              @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId     String                     @db.Uuid
  width      Int?
  visibility DatabaseViewColVisibility? @default(Visible)

  @@unique([name, viewId])
  @@index([name, viewId])
}

enum DatabaseViewVisibility {
  Public
  Private
  Sealed
}

enum DatabaseViewColVisibility {
  Hidden
  Visible
}

model EmailOutBox {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  createdBy   String?
  context     String
  to          String
  cc          String?
  subject     String
  content     String?
  deliveredAt DateTime?
  tags        Json?
  workspaces  Workspace[]
}
