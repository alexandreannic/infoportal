generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // provider = "postgresql"
  // url      = "postgresql://alexandreac:sieges78@localhost:5432/im-tools"
}

model KoboServer {
  id       String     @id @default(uuid())
  url      String
  urlV1    String?
  token    String
  KoboForm KoboForm[]
}

model KoboForm {
  id                 String               @id @default(uuid())
  name               String
  server             KoboServer           @relation(fields: [serverId], references: [id])
  serverId           String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?
  deploymentStatus   String?
  updatedBy          String?
  uploadedBy         String?
  enketoUrl          String?
  submissionsCount   Int?
  KoboAnswers        KoboAnswers[]
  KoboAnswersHistory KoboAnswersHistory[]
}

model KoboAnswers {
  id                     String               @id
  uuid                   String
  form                   KoboForm             @relation(fields: [formId], references: [id])
  formId                 String
  updatedAt              DateTime?
  start                  DateTime
  end                    DateTime
  date                   DateTime
  version                String?
  submissionTime         DateTime
  validationStatus       String?
  validatedBy            String?
  lastValidatedTimestamp Int?
  geolocation            String?
  answers                Json
  attachments            Json[]
  source                 String?
  deletedAt              DateTime?
  deletedBy              String?
  tags                   Json?
  histories              KoboAnswersHistory[] @relation("KoboAnswersToHistory")

  @@unique([id, formId])
  @@index([deletedAt])
  @@index([date])
  @@index([formId])
}

model KoboAnswersHistory {
  id       String        @id @default(uuid())
  form     KoboForm?     @relation(fields: [formId], references: [id])
  formId   String?
  answerId String?
  answers  KoboAnswers[] @relation("KoboAnswersToHistory")
  by       String
  date     DateTime      @default(now())
  type     String?
  property String?
  oldValue Json?
  newValue Json?

  @@index([formId])
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  createdBy       String?
  createdAt       DateTime       @default(now())
  lastConnectedAt DateTime?
  accessToken     String?
  name            String?
  drcJob          String?
  avatar          Bytes?         @db.ByteA
  drcOffice       String?
  admin           Boolean        @default(false)
  officer         String?
  activities      UserActivity[]

  @@index([email])
}

model UserActivity {
  id     String   @id @default(uuid())
  at     DateTime @default(now())
  user   User?    @relation(fields: [userId], references: [id])
  detail String?
  userId String?
}

enum FeatureAccessLevel {
  Read
  Write
  Admin
}

enum FeatureAccessType {
  KoboForm
}

model FeatureAccess {
  id          String             @id @default(uuid())
  createdBy   String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime?
  featureType FeatureAccessType?
  featureId   String?
  email       String?
  drcOffice   String?
  drcJob      String?
  level       FeatureAccessLevel
  params      Json?
  groupId     String?
  group       Group?             @relation(fields: [groupId], references: [id])
}

model Group {
  id        String          @id @default(uuid())
  createdAt DateTime        @default(now())
  name      String          @unique
  desc      String?
  accesses  FeatureAccess[]
  items     GroupItem[]
}

model GroupItem {
  id        String             @id @default(uuid())
  createdAt DateTime           @default(now())
  drcJob    String?
  drcOffice String?
  email     String?
  level     FeatureAccessLevel
  group     Group?             @relation(fields: [groupId], references: [id])
  groupId   String?
}

model AccessToken {
  id        String   @id @default(uuid())
  createdBy DateTime @default(now())
  name      String
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Proxy {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  expireAt  DateTime?
  createdBy String?
  name      String       @unique
  slug      String       @unique
  url       String
  disabled  Boolean?
  usage     ProxyUsage[]
}

model ProxyUsage {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  ipAddresses String[]
  proxy       Proxy    @relation(fields: [proxyId], references: [id])
  proxyId     String
}

model JsonStore {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  updatedBy String
  key       String    @unique
  value     Json
}

model DatabaseView {
  id         String                 @id @default(uuid())
  databaseId String
  name       String
  createdAt  DateTime               @default(now())
  createdBy  String?
  updatedAt  DateTime?
  updatedBy  String?
  visibility DatabaseViewVisibility @default(Private)
  details    DatabaseViewCol[]

  @@unique([databaseId, name])
  @@index([name])
  @@index([databaseId])
}

model DatabaseViewCol {
  name       String
  view       DatabaseView?              @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId     String
  width      Int?
  visibility DatabaseViewColVisibility? @default(Visible)

  @@unique([name, viewId])
  @@index([name, viewId])
}

enum DatabaseViewVisibility {
  Public
  Private
  Sealed
}

enum DatabaseViewColVisibility {
  Hidden
  Visible
}

model EmailOutBox {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  createdBy   String?
  context     String
  to          String
  cc          String?
  subject     String
  content     String?
  deliveredAt DateTime?
  tags        Json?
}
