import {formatDistance, formatDuration as formatDurationFns, intervalToDuration} from 'date-fns'
import {Ip} from 'infoportal-api-sdk'

const invalidDate = ''

export const isDateValid = (d?: Date): boolean => {
  return !!d && d instanceof Date && !isNaN(d.getTime())
}

export const formatDate = (d?: Date): string => {
  if (!isDateValid(d)) return invalidDate
  return d!.toLocaleDateString()
}

export const formatTime = (d?: Date): string => {
  if (!isDateValid(d)) return invalidDate
  return d!.toLocaleTimeString()
}

export const formatDateTime = (d?: Date): string => {
  if (!isDateValid(d)) return invalidDate
  return d!.toLocaleDateString() + ' ' + d!.toLocaleTimeString()
}

export const dateFromNow: {
  (d: Date): string
  (d?: undefined): undefined
  (d?: Date): string | undefined
} = d => {
  return d ? formatDistance(d, new Date(), {addSuffix: true}) : (undefined as any)
}

export const formatLargeNumber = (n?: number, options?: Intl.NumberFormatOptions): string => {
  return n !== undefined && n !== null && !isNaN(n) ? n.toLocaleString('en-EN', options) : '-'
}

export const formatDuration = ({start, end}: {start: Date; end: Date}) => {
  return formatDurationFns(intervalToDuration({start, end}))
}

export type Messages = (typeof en)['messages']

export const en = Object.freeze({
  formatDate,
  formatTime,
  formatDateTime,
  dateFromNow,
  formatDuration,
  formatLargeNumber,
  messages: {
    default: 'Default',
    snapshot: 'Snapshot',
    invalid: 'Invalid',
    others: 'Others',
    other: 'Other',
    exist: 'Exist',
    createWorkspace: 'Create Workspace',
    notExist: 'Not exist',
    area: 'Area',
    men: 'Men',
    return: 'Return',
    lightTheme: {
      light: 'Light',
      dark: 'Dark',
      system: 'Device default',
    },
    importXlsFile: 'Import XLS file',
    noComment: 'No comment',
    dashboardId: 'Dashboard Id',
    complete: 'Complete',
    dataSource: 'Data source',
    answers: 'Answers',
    seeResults: `See results`,
    meta: 'Meta',
    updating: 'Updating',
    users: 'Users',
    link: 'Link',
    choices: 'Choices',
    edit: 'Edit',
    type: 'Type',
    mapping: 'Mapping',
    editKobo: `Edit (⚠️. Requires appropriate KoboToolbox permissions).`,
    editForm: `Edit`,
    apply: 'Apply',
    clear: 'Clear',
    cache: 'Cache',
    public: 'Public',
    serverCache: 'Server cache',
    createDashboard: 'Create dashboard',
    dashboardLink: 'Dashboard link',
    cancel: 'Cancel',
    custom: 'Custom',
    close: 'Close',
    home: 'Home',
    pageNotExists: 'This page does not exist.',
    reinitialize: 'Reinitialize',
    connectAs: 'Connect as',
    wait: 'Wait',
    skip: 'Skip',
    _builder: {
      diffTimeout: 'Calculating changes is taking too long. Are you sure you have uploaded the good form?',
      alertPreviouslyKoboForm: `This form was originally imported from Kobo. It's no longer connected. Any version you publish here here won’t update Kobo.`,
      importCurrentKoboSurvey: 'Import last Kobo form version',
      backToFormSelection: 'Select new form',
    },
    column: 'Column',
    row: 'Row',
    name: 'Name',
    by: 'By',
    createdByAt: (by: string, at: string) => `Created by ${by} at ${at}`,
    updatedByAt: (by: string, at: string) => `Updated by ${by} at ${at}`,
    accessLevel: 'Access level',
    females: 'Females',
    paidOn: 'Paid on',
    lastStatusUpdate: 'Last status update',
    save: 'Save',
    readonly: 'Read only',
    somethingWentWrong: 'Something went wrong',
    yes: 'Yes',
    influencingFactors: 'Influencing factors',
    familyUnity: 'Family unity',
    city: 'City',
    koboServer: 'Kobo server',
    no: 'No',
    validation_: {
      [Ip.Submission.Validation.Approved]: 'Approved',
      [Ip.Submission.Validation.Pending]: 'Pending',
      [Ip.Submission.Validation.Rejected]: 'Rejected',
      [Ip.Submission.Validation.Flagged]: 'Flagged',
      [Ip.Submission.Validation.UnderReview]: 'UnderReview',
    } as const,
    deploymentStatus_: {
      [Ip.Form.DeploymentStatus.draft]: 'Draft',
      [Ip.Form.DeploymentStatus.archived]: 'Archived',
      [Ip.Form.DeploymentStatus.deployed]: 'Deployed',
    },
    open: 'Open',
    submissionsByLocation: 'Submissions by location',
    submissionsByCategory: 'Submissions by category',
    submissionsByUser: 'Submissions by user',
    submissionsByForm: 'Submissions by form',
    connectedToKobo: 'Connected to Kobo',
    importedFromKobo: 'Imported from Kobo',
    includeKoboAccountNames: "Include KoboToolbox account's name",
    copyLink: 'Copy link',
    copyResponderLink: 'Copy responder link',
    copiedToClipboard: 'Copied to clipboard',
    copied: 'Copied',
    copy: 'Copy',
    forms: 'Forms',
    contactAdmin: 'Contact:',
    question: 'Question',
    anonymous: 'Anonymous',
    kobo: 'Kobo',
    answer: 'Answer',
    calculations: 'Calculations',
    value: 'Value',
    publish: 'Publish',
    addFilter: 'Add filter',
    addUser: 'Add user',
    percent: 'Percent',
    Flagged: 'Flagged',
    UnderReview: 'UnderReview',
    Pending: 'Pending',
    alreadyExists: 'Already exists',
    history: 'History',
    recap: 'Recap',
    search: 'Search',
    searchInForms: (n: number) => `Search in ${n}`,
    settings: 'Settings',
    onboardingTitle: "Let's start with a name for your workspace",
    enterProjectName: 'Enter your workspace name',
    action: 'Action',
    workspaceId: 'Workspace ID',
    Approved: 'Approved',
    createShema: 'Create schema',
    runningEllipsis: 'Running...',
    _formAction: {
      noAccessToForm: 'Unknown form (no access)',
      executedActions: 'Executed actions',
      executionsHistory: 'Executions',
      syncStarted: 'Synchronisation started...',
      reRunOnAllData: 'Re-run all actions',
      reRunOnAllDataDetails:
        'This will reset all data in the database and re-run all actions.\n' +
        'This process may take a few minutes. Are you sure you want to continue?',
      actionWithErrorWontRun: `This action cannot run because it contains errors.`,
      thisActionTargetAFormWithoutSchema: `This action is targeting a form that does have any schema deployed yet.`,
      actionSummary: 'Action summary',
      newAction: 'Create an Action',
      _actionTypeLabel: {
        [Ip.Form.Action.Type.insert]: 'Insert',
        [Ip.Form.Action.Type.mutate]: 'Mutate',
      } as const,
      _actionTypeDesc: {
        [Ip.Form.Action.Type.insert]: 'Generate new rows from submissions using a transformation.',
        [Ip.Form.Action.Type.mutate]: 'Modify existing rows from submissions using a function.',
      } as const,
    },
    updatingTag: (rowsCount: number, key: string, value: string) => `Updating ${key}=${value} on ${rowsCount} rows...`,
    cannotUpdateTag: (rowsCount: number, key: string, value: string) =>
      `Update failed for ${key}=${value} on ${rowsCount} rows. Table not edited.`,
    Rejected: 'Rejected',
    mykolaiv: 'Mykolaiv',
    lastConnectedAt: 'Last connection',
    validation: 'Validation',
    view: 'View',
    continue: 'Continue',
    viewData: 'View data',
    creating: 'Creating...',
    theme: 'Dark theme',
    format: 'Format',
    previous: 'Previous',
    filter: 'Filter',
    distinct: 'Distinct',
    noneFormatted: '<i>None</i>',
    none: 'None',
    filterPlaceholder: 'Filter...',
    count: 'Count',
    sum: 'Sum',
    average: 'Average',
    min: 'Min',
    max: 'Max',
    disabilities: 'Disabilities',
    minors: 'Minors',
    editAgain: 'Edit again',
    children: 'Children',
    next: 'Next',
    clearFilter: 'Clear filter',
    logout: 'Logout',
    youDontHaveAccess: `You don't have access. Contact alexandre.annic@drc.ngo`,
    share: 'Share',
    refresh: 'Refresh',
    refreshTable: 'Refresh current data',
    grantAccess: 'Grant access',
    title: 'Title',
    appTitle: 'Welcome',
    appSubTitle: 'InfoPortal',
    noDataAtm: 'No data at the moment',
    fileName: 'File name',
    country: 'Country',
    selectCountry: 'Select country',
    _widgetType: {
      [Ip.Dashboard.Widget.Type.Alert]: 'Paragraph',
      [Ip.Dashboard.Widget.Type.Card]: 'Card',
      [Ip.Dashboard.Widget.Type.PieChart]: 'Pie Chart',
      [Ip.Dashboard.Widget.Type.GeoChart]: 'Geo Chart',
      [Ip.Dashboard.Widget.Type.LineChart]: 'Line Chart',
      [Ip.Dashboard.Widget.Type.BarChart]: 'Bar Chart',
      [Ip.Dashboard.Widget.Type.GeoPoint]: 'Geo Point',
      [Ip.Dashboard.Widget.Type.Table]: 'Table',
    },
    signIn: 'Sign-in',
    signInMicrosoft: 'Continue with Microsoft',
    signInMicrosoftDesc: 'Use your Microsoft credentials',
    signInGoogle: 'Continue with Google',
    signInGoogleDesc: 'Use your Google account',
    committed: 'Committed',
    pending: 'Pending',
    rejected: 'Rejected',
    blank: 'Blank',
    suggestion: 'Suggestion',
    signInDesc: 'With your DRC Microsoft account',
    viewDate: `View data`,
    information: 'Information',
    koboData: `Kobo data`,
    activity: 'Activity',
    nfis: 'NFIs',
    previewActivity: `Preview activity`,
    previewRequestBody: `Preview request body code`,
    nLines: (n: number) => `<b>${n}</b> lignes`,
    confirm: 'Confirm',
    delete: 'Delete',
    deleteNRows: (n: string) => `Delete ${n} rows`,
    deleteSelected: `Delete selected`,
    downloadAsXLS: 'Download as XLS',
    downloadAsPdf: 'Download as PDF',
    all: 'All',
    created: 'Created',
    draft: 'Draft',
    live: 'Live',
    details: 'Details',
    _datatable: {
      currentlyDisplayed: `columns displayed`,
      view: 'Views',
      createNewView: 'New view name...',
      viewPublic: 'Public',
      viewPublicDesc: 'Anyone can see and edit',
      viewLock: 'Sealed',
      viewLockDesc: 'Anyone can see, only you can edit',
      viewPrivate: 'Private',
      viewPrivateDesc: 'Only you can see and edit',
      idFilterInfo: 'You can filter by multiple IDs by separating each with a space',
      idFilterPlaceholder: 'ID1 ID2 ID3 [...]',
      toggleColumns: 'Show/hide columns',
    },
    preview: 'Preview',
    paid: 'Paid',
    start: 'Start',
    submissionStart: 'Submission start',
    end: 'End',
    filters: 'Filters',
    endIncluded: 'End (included)',
    typeOfSite: 'Type of site',
    version: 'Version',
    validate: 'Validate',
    deploy: 'Deploy',
    deployLastVersion: 'Deploy last version',
    skipAndSubmit: 'Skip & Import now',
    xlsFormNoChangeTitle: 'No changes detected',
    xlsFormNoChangeDesc: 'You cannot upload this version because it is identical to the current one.',
    checkDiff: 'Check changes',
    success: 'Success',
    warning: 'Warning',
    versions: 'Versions',
    selectFile: 'Select file',
    selectXlsForm: 'Select XLS',
    error: 'Error',
    anErrorOccurred: 'An error occurred',
    create: 'Create',
    line: 'Line',
    limit: 'Limit',
    label: 'Label',
    color: 'Color',
    proxy: 'Proxy',
    noSurveyCreatedYet: 'No form created yet',
    proxyUrl: 'Proxy URL',
    proxyDestinationUrl: 'DestinationURL',
    enabled: 'Enabled',
    households: 'Households',
    displacementStatus: 'Displacement status',
    uniqIndividuals: 'Unique individuals',
    submissions: 'Submissions',
    householdSize: 'Household size',
    occurrences: 'Occurrences',
    dashboard: 'Dashboard',
    base: 'Base',
    errorOnSave: 'Failed to save updates.',
    new: 'New',
    smaller: 'Smaller',
    properties: 'Properties',
    period: 'Period',
    savingEllipsis: 'Saving...',
    customize: 'Customize',
    dangerZone: 'Danger zone',
    _dashboard: {
      canBeHidden: 'Can be hidden',
      operation: 'Operation',
      selectMaterialIcons: 'Icons',
      selectMaterialIconsDesc: 'Search icon and paste the <b>Icon name</b> from',
      deleteThis: 'Delete this dashboard',
      deleteThisDesc: 'Once you delete a dashboard, there is no going back. Please be certain.',
      ranges: 'Ranges',
      addRange: 'Range',
      showEvolution: 'Show evolution',
      filterPeriod: 'Filter by date',
      filterPeriodDesc: 'Set the start and end dates that define the data range for this dashboard.',
      publicDesc: 'Make the dashboard accessible outside of the organization.',
      filterData: 'Filter by answers',
      filterDataDesc: 'Define filters applied to the data before it is displayed in widgets or charts.',
      periodComparisonDeltaLabel: 'Number of days',
      periodComparisonDelta: 'Comparison Period Offset',
      periodComparisonDeltaDesc:
        'Number of days to shift back when calculating comparisons. Applies to bar and pie charts.', // Example: set 7 to compare with the same day last week - 30 to compare with the same day last month.',
      downloadChartAsImg: 'Download chart',
      downloadChartAsImgDesc: 'Show a button on each panel to export the chart as a PNG image',
      expendChart: 'Full screen chart',
      expendChartDesc: 'Show a button on each panel to expand the chart to full screen',
      dataPeriod: 'Period',
      newSection: 'New section',
      newLine: 'New line',
      showValue: 'Show value',
      showBase: 'Show base',
      listLimit: 'List limit',
      valueToDisplay: 'Value',
      base: 'Base',
    },
    loading: 'Loading',
    display: 'Display',
    price: 'Price',
    submittedAt: 'Submitted at',
    clearAll: 'Clear all',
    committedAt: 'Committed at',
    id: 'ID',
    idPhoto: 'ID Photo',
    back: 'Back',
    access: 'Access',
    accesses: 'Accesses',
    url: 'URL',
    confirmRemove: 'Confirm remove',
    confirmRemoveDesc: 'This action is permanent and cannot be undone.',
    expireAt: 'Expire at',
    slug: 'Slug',
    try: 'Try',
    category: 'Category',
    origin: 'Origin',
    originId: 'Origin ID',
    destination: 'Destination',
    invalidUrl: 'Invalid URL',
    mainConcerns: 'Main concern',
    accommodationCondition: 'Accommodation condition',
    tenureOfAccommodation: 'Accommodation tenure',
    housingStructure: 'Accommodation structure',
    firstPriorityNeed: '1st Priority needs',
    secondPriorityNeed: '2nd Priority needs',
    thirdPriorityNeed: '3rd Priority needs',
    selected: 'Selected',
    phone: 'Phone',
    payName: 'Payment contact name',
    payPhone: 'Payment contact phone',
    finance: 'Finance',
    admin: 'Admin',
    inPerson: 'In person',
    globalError: `If the problem persist, please contact support and include the snippet below.`,
    online: 'Online',
    age: 'Age',
    submitAll: 'Submit all',
    submit: 'Submit',
    newForm: 'New form',
    retry: 'Retry',
    folder: 'Folder',
    folders: 'Folders',
    formSource_: {
      [Ip.Form.Type.smart]: 'Smart database',
      [Ip.Form.Type.kobo]: 'Imported from KoboToolbox',
      [Ip.Form.Type.internal]: 'Raw form',
    },
    changeAccount: 'Change account',
    addNewKoboAccount: 'Add new Kobo account',
    serverUrlV1: 'Server URL KC (API v1)',
    serverUrlV2: 'Server URL KF (API v2)',
    selectAccount: 'Select account',
    testConnection: 'Test connection',
    connectionSuccessful: 'Connection successful',
    apiToken: 'API Token',
    lastName: 'Last name',
    change: 'Change',
    includeColumns: `Include column's name`,
    successfullyEdited: `Successfully edited`,
    successfullyEditedRows: (n: number) => `Successfully edited ${n} rows.`,
    successfullyAdded: `Successfully added.`,
    successfullyDeleted: `Successfully deleted.`,
    table: 'Table',
    comparedToTotalAnswers: 'Based on total answers:',
    chart: 'Chart',
    group: 'Group',
    required: 'Required',
    invalidEmail: 'Invalid email',
    selectForm: 'Select form',
    duration: 'Duration',
    userInvitationAlreadySent: 'An invitation has already been sent.',
    userInvitationSent: 'Invitation sent!',
    accept: 'Accept',
    refuse: 'Refuse',
    notSpecified: 'Not specified',
    logs: 'Logs',
    itCannotBeChanged: (admin: string) =>
      `For privacy reasons, you will not be able to change it later without contacting ${admin}.`,
    select: 'Select',
    creation: 'Creation',
    deleteThisProject: 'Delete this form',
    deleteThisProjectDesc: 'Once you delete a form, there is no going back. Please be certain.',
    accountName: 'Account name',
    firstName: 'First name',
    patronyme: 'Patronyme',
    data: 'Data',
    duplicate: 'Duplicate',
    serverId: 'Server ID',
    server: 'Server',
    scoring: 'Scoring',
    selectAll: 'Select all',
    completed: 'Completed',
    ratio: 'Ratio',
    selectKoboForm: 'Select Kobo form',
    _meta: {
      start: 'Start',
      end: 'End',
      submissionTime: 'Submission time',
      version: 'Version',
      attachments: 'Attachments',
      geolocation: 'Geolocation',
      isoCode: 'ISO Geo Code',
      id: 'Id',
      uuid: 'UUID',
      validationStatus: 'Validation Status',
      validatedBy: 'Validated By',
      submittedBy: 'Submitted By',
      lastValidatedTimestamp: 'Last Validated Timestamp',
      updatedAt: 'Updated At',
    },
    koboSubmissionTime: 'Kobo submission',
    absolute: 'Absolute',
    differences: 'Differences',
    noMessage: 'No message',
    import: 'Import',
    formId: 'Form ID',
    submissionId: 'Submission ID',
    contact: (_: string) => `Contact <b>${_}</b>.`,
    intentions: 'Intentions',
    sex: 'Sex',
    message: `Message`,
    optional: 'Optional',
    dragdropTitle: 'Drag & drop your file here, or click to select',
    daily: 'Daily',
    monthly: 'Monthly',
    months: 'Months',
    createdAt: 'Created at',
    visible: 'Visible',
    visibility: 'Visibility',
    hidden: 'Hidden',
    updatedAt: 'Updated at',
    status: 'Status',
    selectData: 'Select Data',
    location: 'Location',
    submissionTime: 'Submission',
    submittedBy: 'By',
    add: 'Add',
    case: 'Case',
    undefined: 'Unknown',
    unarchive: 'Unarchive',
    archive: 'Archive',
    archiveFormDesc: 'Archive this form and disable new submissions.',
    archiveKoboFormDesc: 'It will also be archived in Kobo.',
    sample: 'Sample overview',
    documentation: 'Documentation',
    general: 'General',
    email: 'Email',
    _overview: {
      includeKoboUsers: 'Include Kobo user names',
    },
    _settings: {
      setCategoryDesc: 'Type something and press Enter to create a new folder.',
      connectedToKobo: 'Connected to Kobo',
      connectedToKoboDesc: 'The database is automatically synchronized whenever submissions are made in Kobo.',
      ipToKobo: 'Updating submissions from Kobo are sent are automatically sent to Kobo.',
      koboToIp: `New submissions from Kobo are automatically sent to InfoPortal. Any changes in Kobo can be uploaded in InfoPortal using the <b>SYNC</b> button`,
      koboDisconnectedNoteTitle: `Connexion can re-enable later`,
      koboDisconnectedNoteDesc: `But changes made in InfoPortal while it was disabled, as submission's update and new form version, won't be pushed to Kobo.`,
      // disconnectToKoboDesc: `New submissions in Kobo won’t appear in InfoPortal, and updates made in InfoPortal won’t be sent to Kobo.<br/> <b>You can re-enable sync later</b>, but changes made in InfoPortal while it was disabled won't be pushed to Kobo.`,
      disconnectToKobo: 'Disconnect from Kobo',
      reconnectToKobo: 'Re-connect to Kobo',
    },
    job: 'Job',
    Access: {
      giveAccessBy: 'Grant access by',
      jobAndOffice: 'Job and Office',
    },
    overview: 'Overview',
    requests: 'Requests',
    selectADatabase: 'Select a Kobo form',
    comparedToPreviousMonth: (n: number) => `Compared to ${n} days ago`,
    global: 'Global',
    description: 'Description',
    createdBy: 'Created by',
    gender: 'Gender',
    program: 'Program',
    progress: 'Progress',
    relative: 'Relative',
    cumulative: 'Cumulative',
    register: 'Register',
    appInMaintenance: "Application in maintenance, we'll be back soon.",
    comments: 'Comments',
    sort: 'Sort',
    hardRefresh: 'Hard refresh',
    amount: 'Amount',
    target: 'Target',
    date: 'Date',
    validFrom: 'Valid from',
    expiry: 'Expiry',
    pin: 'Pin',
    year: 'Year',
    koboForm: 'Kobo form',
    koboForms: 'Kobo forms',
    otherKoboForms: 'Other Kobo forms',
    _koboDatabase: {
      mergedDb: 'Merged DB',
      autoEmail: 'Auto Email',
      autoEmailDesc: 'Emails are sent to recipients on submission or column updates via Kobo or InfoPortal',
      isArchived: 'This form is archived.',
      translation: 'Translation',
      newValue: 'New value',
      oldValue: 'Old value',
      koboQuestion: 'Kobo question',
      deleted: 'Deleted',
      customColumn: 'Custom column',
      tagNotUpdated: 'Failed to update tag. Reloading clean data set...',
      downloadAsXLS: 'Download <b>filtered data</b> as XLS',
      importFromXLS: 'Import from XLS',
      repeatAs: 'Show Grouped questions as',
      repeatAsColumn: 'New columns',
      // repeatAsColumnDesc: 'Display each group question in a dedicated column.',
      repeatAsRows: 'New rows',
      repeatDont: `Squashed in 1 column`,
      repeatAsQuestionName: 'Select group to repeat',
      // repeatAsRowDesc: '',
      title: (form?: string) => `Kobo Database${form ? `: <b>${form}</b>` : ``}`,
      showAllQuestions: 'Show unanswered questions',
      pullData: `Synchronize last Kobo data.`,
      pullDataAt: (lastUpdate: Date) =>
        `Synchronize Kobo data.<br/>Last synchronization: <b>${formatDateTime(lastUpdate)}</b>.`,
      valueNoLongerInOption: 'This value is no longer in the options list',
      noAccessToForm: `You don't have access to any database.`,
      openForm: 'Open form',
    },
    _admin: {
      createGroup: 'Create group',
    },
    resourceDoesNotExist: 'Resource not found. It may have been deleted or never existed.',
    fillForm: 'Fill form',
    viewInKobo: 'View in Kobo',
    note: 'Note',
    projectCode: 'Project Code',
    form: 'Form',
    koboId: 'Kobo _id',
    desc: 'Desc',
    viewNMore: (n: number) => `View ${n} more`,
    viewNLess: (n: number) => `View ${n} less`,
    viewMore: 'More',
    viewLess: 'Less',
    source: 'Source',
    timeConsumingOperation: 'Time consuming operation.',
    sector: 'Sector',
    showMore: 'Show more',
    thisFormIsManagedByKobo: 'This form is managed by KoboToolbox.',
    filterBlanks: 'Filter blanks',
    total: 'Total',
    shouldDelete: 'Delete?',
    remove: 'Delete',
    sync: 'Sync',
    pullLast: 'Pull last',
    pullLastTitle: 'Pull last',
    beneficiaries: 'Beneficiaries',
    importData: {
      create: 'Upload New Data',
      update: 'Update Existing Data',
      generate: 'Generate Excel Template',
    },
    docsTitle: 'Documentation',
  },
})
