generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // provider = "postgresql"
  // url      = "postgresql://alexandreac:sieges78@localhost:5432/im-tools"
}

model Workspace {
  id              String                @id @default(uuid()) @db.Uuid
  createdAt       DateTime              @default(now())
  createdBy       String
  name            String
  slug            String                @unique
  sector          String?
  koboServer      KoboServer[]
  form            Form[]
  groups          Group[]
  accessTokens    AccessToken[]
  proxys          Proxy[]
  emailOutBoxs    EmailOutBox[]
  featureAccesses FormAccess[]
  access          WorkspaceAccess[]
  invitation      WorkspaceInvitation[]
  dashboards      Dashboard[]

  @@index([slug])
}

model WorkspaceInvitation {
  id          String      @id @default(uuid()) @db.Uuid
  createdAt   DateTime    @default(now())
  createdBy   String
  toEmail     String
  accessLevel AccessLevel
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId String      @db.Uuid

  @@unique([workspaceId, toEmail])
  @@index([toEmail])
}

model WorkspaceAccess {
  id          String      @id @default(uuid()) @db.Uuid
  createdAt   DateTime    @default(now())
  createdBy   String
  level       AccessLevel
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @db.Uuid
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId String      @db.Uuid

  @@unique([workspaceId, userId])
}

model KoboServer {
  id          String         @id @default(uuid()) @db.Uuid
  name        String
  url         String
  urlV1       String?
  token       String
  workspace   Workspace      @relation(fields: [workspaceId], references: [id])
  workspaceId String         @db.Uuid
  form        FormKoboInfo[]
}

enum DeploymentStatus {
  deployed
  archived
  draft
}

enum FormType {
  kobo
  smart
  internal
}

model FormKoboInfo {
  server    KoboServer @relation(fields: [accountId], references: [id])
  accountId String     @db.Uuid
  enketoUrl String?
  koboId    String
  form      Form       @relation(fields: [formId], references: [id])
  formId    String     @unique @db.VarChar(32)
  deletedAt DateTime?
  deletedBy String?

  @@index([koboId])
}

model Form {
  id               String                  @id @default(cuid()) @db.VarChar(32)
  name             String
  createdAt        DateTime                @default(now())
  type             FormType
  // createdBy
  uploadedBy       String?
  updatedAt        DateTime?
  updatedBy        String?
  deploymentStatus DeploymentStatus?
  category         String?
  answers          FormSubmission[]
  histories        FormSubmissionHistory[]
  workspace        Workspace               @relation(fields: [workspaceId], references: [id])
  workspaceId      String                  @db.Uuid
  versions         FormVersion[]
  accesses         FormAccess[]
  actions          FormAction[]            @relation("OwnerFormToAction")
  referencedBy     FormAction[]            @relation("TargetFormToAction")
  actionsReport    FormActionReport[]
  kobo             FormKoboInfo?
  dashboard        Dashboard[]

  @@index([category])
}

enum FormVersionStatus {
  active
  inactive
  draft
}

model FormVersion {
  id         String            @id @default(cuid()) @db.VarChar(32)
  version    Int
  fileName   String?
  message    String?
  uploadedBy String
  createdAt  DateTime          @default(now())
  schema     Json
  status     FormVersionStatus @default(inactive)
  form       Form              @relation(fields: [formId], references: [id])
  formId     String

  @@unique([formId, version])
}

enum FormSubmissionValidation {
  Approved
  Pending
  Rejected
  Flagged
  UnderReview
}

model FormSubmission {
  id                     String                    @id @db.VarChar(32)
  originId               String?
  uuid                   String
  form                   Form                      @relation(fields: [formId], references: [id])
  formId                 String
  start                  DateTime?
  end                    DateTime?
  submissionTime         DateTime
  submittedBy            String?
  version                String?
  validationStatus       FormSubmissionValidation?
  validatedBy            String?
  lastValidatedTimestamp Int?
  geolocation            Json?
  isoCode                String?
  answers                Json
  attachments            Json[]                    @default([])
  deletedAt              DateTime?
  deletedBy              String?
  histories              FormSubmissionHistory[]   @relation("FormSubmissionToHistory")

  @@index([deletedAt])
  @@index([formId])
  @@index([formId, originId])
  @@index([formId, submissionTime])
}

model FormSubmissionHistory {
  id       String           @id @default(uuid()) @db.Uuid
  form     Form?            @relation(fields: [formId], references: [id])
  formId   String?
  by       String
  date     DateTime         @default(now())
  type     String?
  property String?
  oldValue Json?
  newValue Json?
  answerId String?
  answers  FormSubmission[] @relation("FormSubmissionToHistory")

  @@index([formId])
}

enum UserProvider {
  google
  microsoft
}

model User {
  id              String            @id @default(uuid()) @db.Uuid
  email           String            @unique
  createdAt       DateTime          @default(now())
  lastConnectedAt DateTime?
  accessToken     String?
  name            String?
  job             String?
  location        String?
  avatar          Bytes?            @db.ByteA
  accessLevel     AccessLevel       @default(Read)
  activities      UserActivity[]
  workspaceAccess WorkspaceAccess[]
  provider        UserProvider?     @default(google)

  @@index([email])
}

model UserActivity {
  id     String   @id @default(uuid()) @db.Uuid
  at     DateTime @default(now())
  user   User?    @relation(fields: [userId], references: [id])
  detail String?
  userId String?  @db.Uuid
}

enum AccessLevel {
  Read
  Write
  Admin
}

model FormAccess {
  id          String      @id @default(uuid()) @db.Uuid
  createdBy   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?
  form        Form?       @relation(fields: [formId], references: [id])
  formId      String?     @db.VarChar(32)
  job         String?
  location    String?
  email       String?
  level       AccessLevel
  groupId     String?     @db.Uuid
  group       Group?      @relation(fields: [groupId], references: [id])
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  workspaceId String      @db.Uuid
  filters     Json?

  @@index([workspaceId, email])
  @@index([workspaceId, formId])
}

model Group {
  id          String       @id @default(uuid()) @db.Uuid
  createdAt   DateTime     @default(now())
  createdBy   String?
  name        String       @unique
  desc        String?
  accesses    FormAccess[]
  items       GroupItem[]
  workspace   Workspace    @relation(fields: [workspaceId], references: [id])
  workspaceId String       @db.Uuid
}

model GroupItem {
  id        String      @id @default(uuid()) @db.Uuid
  createdAt DateTime    @default(now())
  job       String?
  location  String?
  email     String?
  level     AccessLevel
  group     Group?      @relation(fields: [groupId], references: [id])
  groupId   String?     @db.Uuid
}

model AccessToken {
  id         String      @id @default(uuid()) @db.Uuid
  createdBy  DateTime    @default(now())
  name       String
  workspaces Workspace[]
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Proxy {
  id         String       @id @default(uuid()) @db.Uuid
  createdAt  DateTime     @default(now())
  expireAt   DateTime?
  createdBy  String?
  name       String       @unique
  slug       String       @unique
  url        String
  disabled   Boolean?
  usage      ProxyUsage[]
  workspaces Workspace[]
}

model ProxyUsage {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  ipAddresses String[]
  proxy       Proxy    @relation(fields: [proxyId], references: [id])
  proxyId     String   @db.Uuid
}

model JsonStore {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  updatedBy String
  key       String    @unique
  value     Json
}

model DatabaseView {
  id         String                 @id @default(uuid()) @db.Uuid
  databaseId String
  name       String
  createdAt  DateTime               @default(now())
  createdBy  String?
  updatedAt  DateTime?
  updatedBy  String?
  visibility DatabaseViewVisibility @default(Private)
  details    DatabaseViewCol[]

  @@unique([databaseId, name])
  @@index([name])
  @@index([databaseId])
}

model DatabaseViewCol {
  name       String
  view       DatabaseView?              @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId     String                     @db.Uuid
  width      Int?
  visibility DatabaseViewColVisibility? @default(Visible)

  @@unique([name, viewId])
  @@index([name, viewId])
}

enum DatabaseViewVisibility {
  Public
  Private
  Sealed
}

enum DatabaseViewColVisibility {
  Hidden
  Visible
}

model EmailOutBox {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  createdBy   String?
  context     String
  to          String
  cc          String?
  subject     String
  content     String?
  deliveredAt DateTime?
  tags        Json?
  workspaces  Workspace[]
}

// ----------------
// Form Action
// ----------------

enum FormActionType {
  insert
  mutate
}

model FormAction {
  id           String          @id @default(uuid())
  createdAt    DateTime        @default(now())
  createdBy    String?
  type         FormActionType
  name         String
  disabled     Boolean         @default(false)
  description  String?
  body         String?
  bodyErrors   Int?
  bodyWarnings Int?
  logs         FormActionLog[]

  form   Form   @relation("OwnerFormToAction", fields: [formId], references: [id])
  formId String

  // Action is triggered when this form receive new submission
  targetForm   Form   @relation("TargetFormToAction", fields: [targetFormId], references: [id])
  targetFormId String

  @@index([formId])
}

model FormActionReport {
  id                  String    @id @default(uuid())
  totalActions        Int
  actionExecuted      Int
  submissionsExecuted Int
  startedAt           DateTime
  endedAt             DateTime?
  failed              String?
  startedBy           String
  form                Form?     @relation(fields: [formId], references: [id])
  formId              String?   @db.VarChar(32)
}

enum FormActionLogType {
  error
  log
}

model FormActionLog {
  id         String            @id @default(uuid())
  type       FormActionLogType
  createdAt  DateTime          @default(now())
  title      String?
  details    String?
  submission Json?
  action     FormAction        @relation(fields: [actionId], references: [id])
  actionId   String
}

// ----------------
// Dashboard
// ----------------

model Dashboard {
  id               String             @id @default(uuid())
  name             String
  createdAt        DateTime           @default(now())
  createdBy        String
  slug             String             @unique
  description      String?
  sections         DashboardSection[]
  sourceform       Form               @relation(fields: [sourceFormId], references: [id])
  sourceFormId     String             @db.VarChar(32)
  workspace        Workspace          @relation(fields: [workspaceId], references: [id])
  workspaceId      String             @db.Uuid
  deploymentStatus DeploymentStatus
  theme            Json               @default("{}")

  isPublic              Boolean   @default(false)
  start                 DateTime?
  end                   DateTime?
  filters               Json?
  enableChartDownload   Boolean?
  enableChartFullSize   Boolean?
  periodComparisonDelta Int?

  deletedAt DateTime?
  deletedBy String?

  published   DashboardPublished? @relation(fields: [publishedId], references: [id])
  publishedId String?             @unique
}

model DashboardPublished {
  id          String     @id @default(uuid())
  snapshot    Json
  publishedAt DateTime   @default(now())
  publishedBy String
  dashboard   Dashboard?
}

model DashboardSection {
  id          String            @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime          @default(now())
  widgets     DashboardWidget[]
  dashboard   Dashboard         @relation(fields: [dashboardId], references: [id])
  dashboardId String
}

enum WidgetType {
  Alert
  Card
  PieChart
  GeoChart
  LineChart
  BarChart
  GeoPoint
  Table
}

model DashboardWidget {
  id          String           @id @default(uuid())
  type        WidgetType
  i18n_title  String[]
  description String?
  position    Json // { x: number; y: number; w: number; h: number } // grid layout
  config      Json             @default("{}") // Record<String, any> // widget-specific options
  section     DashboardSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId   String
}
